Assignment 3 readme File

------------------------------------------------------------------------
What is your name?
David Wang


------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. 
Such documents include the course's lecture slides and precept handouts.

The course's textbooks and reference manuals.

The man pages on the armlab cluster.

The course's current staff members outside of 
class time through meetings.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
In fulfillment of the requirement from section 2.4.3 of the Academic
Regulations in Princeton's Rights, Rules, Responsibilities guide,
enter your name in the space below the following affirmation:

This paper represents my own work in accordance with University
regulations.

David Wang

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

The assignment improved my understanding of abstraction and modularity
for creating abstract data structures, as well as how we can 
simulate object oriented behavior in C by using pointers to structures
rather than objects. This assignment also improved my understanding
of managing and debugging dynamically allocated memory, as well as 
building multi-file programs using make. 

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

    symtablelist.c: line 80: medium priority:
    Do you want to validate 'pvValue' through an assert?

    symtablelist.c: line 138: medium priority:
    Do you want to validate 'pvValue' through an assert?

    symtablelist.c: line 223: medium priority:
    Do you want to validate 'pvExtra' through an assert?

The SymTable ADT should not enforce whether or not the value of each
binding is NULL, as both the value and its memory is controlled 
by the client. Similarly, the client specifies both the pfApply function
and the pvExtra parameter, and so the SymTable ADT cannot make a
conclusion about whether or not the pvExtra parameter can be NULL.
The SymTable implementation only enforces that the oSymTable object
and pcKey is not NULL, as we cannot hash NULL or duplicate keys. 

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None. 

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

    symtablehash.c: line 198: medium priority:
    Do you want to validate 'pvValue' through an assert?

    symtablehash.c: line 269: medium priority:
    Do you want to validate 'pvValue' through an assert?

    symtablehash.c: line 377: medium priority:
    Do you want to validate 'pvExtra' through an assert?

The SymTable ADT should not enforce whether or not the value of each
binding is NULL, as both the value and its memory is controlled 
by the client. Similarly, the client specifies both the pfApply function
and the pvExtra parameter, and so the SymTable ADT cannot make a
conclusion about whether or not the pvExtra parameter can be NULL.
The SymTable implementation only enforces that the oSymTable object
and pcKey is not NULL, as we cannot hash NULL or duplicate keys. 

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.005114 seconds.
-- 5000 bindings consumed 1.086054 seconds.
-- 50000 bindings consumed 109.459807 seconds.
-- 500000 bindings consumed More than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.006056 seconds.
-- 50000 bindings consumed 0.434351 seconds.
-- 500000 bindings consumed 80.592444 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.009996 seconds.
-- 50000 bindings consumed 0.135176 seconds.
-- 500000 bindings consumed 1.800516 seconds.
